---

- name: Check for miniconda existence
  stat:
    path: "{{ miniconda_prefix }}/bin/conda"
  register: miniconda_exists

- name: Include install tasks
  include_tasks: install.yml
  when: miniconda_install and not miniconda_exists.stat.exists

- name: Collect miniconda version
  command: "{{ miniconda_prefix }}/bin/conda -V"
  register: miniconda_installed_version
  changed_when: false

- name: Update miniconda
  include_tasks: update.yml
  when: miniconda_update

- name: Install packages to conda base environment
  command: >-
    {{ miniconda_prefix }}/bin/conda install --yes
    {{ '--override-channels --channel' if (miniconda_channels) else '' }}
    {{ miniconda_channels | join(' --channel ') }}
    {{ miniconda_base_env_packages | join(' ') }}
  when: miniconda_base_env_packages

- name: Conda env block
  block:

    - name: Create tempdir for $CONDA_PKGS_DIRS
      tempfile:
        state: directory
        suffix: miniconda_pkg_cache
      when: (miniconda_conda_environments.values() | selectattr('no_cache', 'defined') | selectattr('no_cache', 'truthy')) is truthy
      changed_when: false
      register: __miniconda_pkg_cache_tempdir

    # Apparently item.value.copy always refers to the built-in copy method of the dict, whereas item.value['copy'] only
    # does if the key 'copy' is not defined
    - name: Create conda envs
      command: >-
        {{ miniconda_prefix }}/bin/conda create --yes
        {{ '--override-channels --channel' if (item.value.channels | default(miniconda_channels)) else '' }}
        {{ (item.value.channels | default(miniconda_channels)) | join(' --channel ') }}
        {{ '--name ' ~ item.key if not item.key.startswith('/') else '--prefix ' ~ item.key }}
        {{ '--copy' if (item.value['copy'] is boolean and item.value['copy']) else '' }}
        {{ item.value.packages | join(' ') }}
      args:
        creates: "{{ miniconda_prefix ~ '/envs/' ~ item.key if not item.key.startswith('/') else item.key }}"
      loop: "{{ miniconda_conda_environments | dict2items }}"
      environment:
        CONDA_PKGS_DIRS: "{{ (item.value.no_cache | default(false)) | ternary(__miniconda_pkg_cache_tempdir.path, '') }}"

  always:

    - name: Remove $CONDA_PKGS_DIRS tempdir
      file:
        path: "{{ __miniconda_pkg_cache_tempdir.path }}"
        state: absent
      when: __miniconda_pkg_cache_tempdir.path is defined
      changed_when: false

- name: Update conda envs
  command: >-
    {{ miniconda_prefix }}/bin/conda install --yes
    {{ '--override-channels --channel' if (item.value.channels | default(miniconda_channels)) else '' }}
    {{ (item.value.channels | default(miniconda_channels)) | join(' --channel ') }}
    {{ '--name ' ~ item.key if not item.key.startswith('/') else '--prefix ' ~ item.key }}
    {{ '--copy' if (item.value['copy'] is boolean and item.value['copy']) else '' }}
    {{ item.value.packages | join(' ') }}
  register: __miniconda_conda_install_output
  changed_when: "'All requested packages already installed' not in __miniconda_conda_install_output.stdout"
  loop: "{{ miniconda_conda_environments | dict2items }}"

- name: Create Galaxy conda env
  command: >-
    {{ miniconda_prefix }}/bin/conda create --yes
    {{ '--override-channels --channel' if galaxy_conda_env_channels else '' }}
    {{ galaxy_conda_env_channels | join(' --channel ') }}
    --name {{ galaxy_conda_env }}
    {{ galaxy_conda_env_packages | join(' ') }}
  args:
    creates: "{{ miniconda_prefix }}/envs/{{ galaxy_conda_env }}"
  when: galaxy_conda_create_env
