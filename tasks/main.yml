---

- name: Fail if miniconda_prefix is not defined
  ansible.builtin.fail:
    msg: "'miniconda_prefix' variable is required but not defined."
  when: miniconda_prefix is not defined

- name: Check for executable existence
  ansible.builtin.stat:
    path: "{{ miniconda_prefix }}/bin/{{ miniconda_executable }}"
  register: miniconda_exec_info

- name: Install installer
  ansible.builtin.include_tasks: install.yml
  when: miniconda_install and not miniconda_exec_info.stat.exists

- name: Collect installer version
  ansible.builtin.command: "{{ miniconda_prefix }}/bin/{{ miniconda_executable }} --version"
  register: miniconda_installed_version
  changed_when: false

- name: Update installer
  ansible.builtin.include_tasks: update.yml
  when: miniconda_update

- name: Install packages to conda base environment
  ansible.builtin.command: >-
    {{ miniconda_prefix }}/bin/{{ miniconda_executable }} install --yes
    {{ '--override-channels --channel' if (miniconda_channels) else '' }}
    {{ miniconda_channels | join(' --channel ') }}
    {{ miniconda_base_env_packages | join(' ') }}
  register: __miniconda_conda_install_conda_output
  changed_when: "'All requested packages already installed' not in __miniconda_conda_install_conda_output.stdout"
  when: miniconda_base_env_packages

# Apparently item.value.copy always refers to the built-in copy method of the dict, whereas item.value['copy'] only does
# if the key 'copy' is not defined
- name: Create conda envs
  ansible.builtin.command: >-
    {{ miniconda_prefix }}/bin/{{ miniconda_executable }} create --yes
    {{ '--override-channels --channel' if (item.value.channels | default(miniconda_channels)) else '' }}
    {{ (item.value.channels | default(miniconda_channels)) | join(' --channel ') }}
    {{ '--name ' ~ item.key if not item.key.startswith('/') else '--prefix ' ~ item.key }}
    {{ '--copy' if (item.value['copy'] is boolean and item.value['copy']) else '' }}
    {{ item.value.packages | join(' ') }}
  args:
    creates: "{{ miniconda_prefix ~ '/envs/' ~ item.key if not item.key.startswith('/') else item.key }}"
  loop: "{{ miniconda_conda_environments | dict2items }}"

- name: Update conda envs
  ansible.builtin.command: >-
    {{ miniconda_prefix }}/bin/{{ miniconda_executable }} install --yes
    {{ '--override-channels --channel' if (item.value.channels | default(miniconda_channels)) else '' }}
    {{ (item.value.channels | default(miniconda_channels)) | join(' --channel ') }}
    {{ '--name ' ~ item.key if not item.key.startswith('/') else '--prefix ' ~ item.key }}
    {{ '--copy' if (item.value['copy'] is boolean and item.value['copy']) else '' }}
    {{ item.value.packages | join(' ') }}
  register: __miniconda_conda_install_output
  changed_when: "'All requested packages already installed' not in __miniconda_conda_install_output.stdout"
  loop: "{{ miniconda_conda_environments | dict2items }}"

- name: Create Galaxy conda env
  ansible.builtin.command: >-
    {{ miniconda_prefix }}/bin/{{ miniconda_executable }} create --yes
    {{ '--override-channels --channel' if galaxy_conda_env_channels else '' }}
    {{ galaxy_conda_env_channels | join(' --channel ') }}
    --name {{ galaxy_conda_env }}
    {{ galaxy_conda_env_packages | join(' ') }}
  args:
    creates: "{{ miniconda_prefix }}/envs/{{ galaxy_conda_env }}"
  when: galaxy_conda_create_env
